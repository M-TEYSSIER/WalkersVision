//opencv
#include "opencv2/imgcodecs.hpp"
#include "opencv2/imgproc.hpp"
#include "opencv2/videoio.hpp"
#include <opencv2/highgui.hpp>
#include <opencv2/video.hpp>
//C
#include <stdio.h>
//C++
#include <iostream>
#include <sstream>
using namespace cv;
using namespace std;
// Global variables
Mat frame; //current frame
Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
int keyboard; //input from keyboard
void help();
void processWcam(char* NumberOfWebcam);
void help(){
    cout
    << "--------------------------------------------------------------------------" << endl
    << "This program shows how to use background subtraction methods provided by "  << endl
    << " OpenCV. You can process both videos (-vid) and images (-img)."             << endl
                                                                                    << endl
    << "Usage:"                                                                     << endl
    << " {./dev wcam WebCamNumber}"                                                 << endl
    << "for example: ./dev wcam 2"                                                  << endl
    << "--------------------------------------------------------------------------" << endl
    << endl;
}

int main(int argc, char* argv[]){
    //print help information
    help();
    //check for the input parameter correctness
            if(argc != 3) {
                cerr <<"Incorret input list" << endl;
                cerr <<"exiting..." << endl;
                return EXIT_FAILURE;
            }
            //create GUI windows
            namedWindow("Frame");
            namedWindow("FG Mask MOG 2");
            //create Background Subtractor objects
    while(true){
            pMOG2 = createBackgroundSubtractorMOG2(); //MOG2 approach
            if(strcmp(argv[1], "wcam") == 0) {
                //input data coming from a webcam
                processWcam(argv[2]);
            }
            else {
                //error in reading input parameters
                cerr <<"Please, check the input parameters." << endl;
                cerr <<"Exiting..." << endl;
                return EXIT_FAILURE;
            }
            //destroy GUI windows
            destroyAllWindows();
            return EXIT_SUCCESS;
        }
}

void processWcam(char* videoFilename){
    //create the capture object
    VideoCapture capture(atoi(videoFilename));
    if(!capture.isOpened()){
        //error in opening the video input
        cerr << "Unable to open Webcam " << videoFilename << endl;
        exit(EXIT_FAILURE);
    }
    //read input data. ESC or 'q' for quitting
    while( (char)keyboard != 'q'  && (char)keyboard != 27 ){
        //read the current frame
        if(!capture.read(frame)) {
            cerr << "Unable to read next frame." << endl;
            cerr << "Exiting..." << endl;
            exit(EXIT_FAILURE);
        }
        //update the background model
        pMOG2->apply(frame, fgMaskMOG2);
        //get the frame number and write it on the current frame
        stringstream ss;
        rectangle(frame, cv::Point(10, 2), cv::Point(100,20),cv::Scalar(255,255,255), -1);
        //show the current frame and the fg masks
        
        imshow("Frame", frame);
        imshow("FG Mask MOG 2", fgMaskMOG2);
        //get the input from the keyboard
        keyboard = waitKey( 30 );
        
         
        
    }
    //delete capture object
    capture.release();
}

